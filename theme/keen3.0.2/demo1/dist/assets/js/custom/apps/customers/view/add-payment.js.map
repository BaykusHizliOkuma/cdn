{"version":3,"file":"js/custom/apps/customers/view/add-payment.js","mappings":"mBAGA,IACQA,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EARJC,EAuLO,CAEHC,KAAM,WAEFR,EAAUS,SAASC,cAAc,yBACjCJ,EAAQ,IAAIK,UAAUC,MAAMZ,GAE5BK,EAAOL,EAAQU,cAAc,8BAC7BT,EAAeI,EAAKK,cAAc,gCAClCR,EAAeG,EAAKK,cAAc,gCAClCP,EAAcH,EAAQU,cAAc,+BApLxCN,EAAYS,eAAeC,eACvBT,EACA,CACIU,OAAQ,CACJ,QAAW,CACPC,WAAY,CACRC,SAAU,CACNC,QAAS,gCAIrB,OAAU,CACNF,WAAY,CACRC,SAAU,CACNC,QAAS,gCAIrB,OAAU,CACNF,WAAY,CACRC,SAAU,CACNC,QAAS,iCAMzBC,QAAS,CACLC,QAAS,IAAIP,eAAeM,QAAQE,QACpCV,UAAW,IAAIE,eAAeM,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO/BC,EAAErB,EAAKK,cAAc,oBAAoBiB,GAAG,UAAU,WAElDvB,EAAUwB,gBAAgB,SAC9B,IAGA3B,EAAa4B,iBAAiB,SAAS,SAAUC,GAE7CA,EAAEC,iBAGE3B,GACAA,EAAU4B,WAAWC,MAAK,SAAUC,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAjC,EAAaoC,aAAa,oBAAqB,MAG/CpC,EAAaqC,UAAW,EAGxBC,YAAW,WAEPtC,EAAauC,gBAAgB,qBAG7BC,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBf,MAAK,SAAUgB,GACVA,EAAOC,cACP5C,EAAM6C,OAGNlD,EAAaqC,UAAW,EAGxBjC,EAAK+C,QAEb,GAGJ,GAAG,MAGHX,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GAER,IAEA9C,EAAa2B,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNS,kBAAkB,EAClBR,gBAAgB,EAChBC,kBAAmB,kBACnBQ,iBAAkB,aAClBP,YAAa,CACTC,cAAe,kBACf9C,aAAc,0BAEnB+B,MAAK,SAAUgB,GACVA,EAAOM,OACPlD,EAAK+C,QACL9C,EAAM6C,QACoB,WAAnBF,EAAOO,SACdf,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,IAEA7C,EAAY0B,iBAAiB,SAAS,SAAUC,GAC5CA,EAAEC,iBAEFU,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNS,kBAAkB,EAClBR,gBAAgB,EAChBC,kBAAmB,kBACnBQ,iBAAkB,aAClBP,YAAa,CACTC,cAAe,kBACf9C,aAAc,0BAEnB+B,MAAK,SAAUgB,GACVA,EAAOM,OACPlD,EAAK+C,QACL9C,EAAM6C,QACoB,WAAnBF,EAAOO,SACdf,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAI/B,GACJ,GAgBA,GAKRS,OAAOC,oBAAmB,WACtBnD,EAAkBC,MACtB,G","sources":["webpack://keen/../demo1/src/js/custom/apps/customers/view/add-payment.js"],"sourcesContent":["\"use strict\";\n\n// Class definition\nvar KTModalAddPayment = function () {\n    var element;\n    var submitButton;\n    var cancelButton;\n    var closeButton;\n    var validator;\n    var newBalance;\n    var form;\n    var modal;\n\n    // Init form inputs\n    var initForm = function () {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n            form,\n            {\n                fields: {\n                    'invoice': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Invoice number is required'\n                            }\n                        }\n                    },\n                    'status': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Invoice status is required'\n                            }\n                        }\n                    },\n                    'amount': {\n                        validators: {\n                            notEmpty: {\n                                message: 'Invoice amount is required'\n                            }\n                        }\n                    }\n                },\n\n                plugins: {\n                    trigger: new FormValidation.plugins.Trigger(),\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\n            }\n        );\n\n        // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\n        $(form.querySelector('[name=\"status\"]')).on('change', function () {\n            // Revalidate the field when an option is chosen\n            validator.revalidateField('status');\n        });\n\n        // Action buttons\n        submitButton.addEventListener('click', function (e) {\n            // Prevent default button action\n            e.preventDefault();\n\n            // Validate form before submit\n            if (validator) {\n                validator.validate().then(function (status) {\n                    console.log('validated!');\n\n                    if (status == 'Valid') {\n                        // Show loading indication\n                        submitButton.setAttribute('data-kt-indicator', 'on');\n\n                        // Disable submit button whilst loading\n                        submitButton.disabled = true;\n\n                        // Simulate form submission\n                        setTimeout(function () {\n                            // Simulate form submission\n                            submitButton.removeAttribute('data-kt-indicator');\n\n                            // Show popup confirmation \n                            Swal.fire({\n                                text: \"Form has been successfully submitted!\",\n                                icon: \"success\",\n                                buttonsStyling: false,\n                                confirmButtonText: \"Ok, got it!\",\n                                customClass: {\n                                    confirmButton: \"btn btn-primary\"\n                                }\n                            }).then(function (result) {\n                                if (result.isConfirmed) {\n                                    modal.hide();\n\n                                    // Enable submit button after loading\n                                    submitButton.disabled = false;\n\n                                    // Reset form for demo purposes only\n                                    form.reset();\n                                }\n                            });\n\n                            //form.submit(); // Submit form\n                        }, 2000);\n                    } else {\n                        // Show popup warning \n                        Swal.fire({\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        cancelButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n\n        closeButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            Swal.fire({\n                text: \"Are you sure you would like to cancel?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, cancel it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                    confirmButton: \"btn btn-primary\",\n                    cancelButton: \"btn btn-active-light\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    form.reset(); // Reset form\t\n                    modal.hide(); // Hide modal\t\t\t\t\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Your form has not been cancelled!.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    return {\n        // Public functions\n        init: function () {\n            // Elements\n            element = document.querySelector('#kt_modal_add_payment');\n            modal = new bootstrap.Modal(element);\n\n            form = element.querySelector('#kt_modal_add_payment_form');\n            submitButton = form.querySelector('#kt_modal_add_payment_submit');\n            cancelButton = form.querySelector('#kt_modal_add_payment_cancel');\n            closeButton = element.querySelector('#kt_modal_add_payment_close');\n\n            initForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTModalAddPayment.init();\n});"],"names":["element","submitButton","cancelButton","closeButton","validator","form","modal","KTModalAddPayment","init","document","querySelector","bootstrap","Modal","FormValidation","formValidation","fields","validators","notEmpty","message","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","$","on","revalidateField","addEventListener","e","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","reset","showCancelButton","cancelButtonText","value","dismiss","KTUtil","onDOMContentLoaded"],"sourceRoot":""}