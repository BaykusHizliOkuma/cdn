{"version":3,"file":"js/custom/apps/subscriptions/list/list.js","mappings":"mBAEA,IAAIA,EAAsB,WAEtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAmFAC,EAAoB,WAEEL,EAAMM,iBAAiB,qDAE/BC,SAAQC,IAElBA,EAAEC,iBAAiB,SAAS,SAAUC,GAClCA,EAAEC,iBAGF,MAAMC,EAASF,EAAEG,OAAOC,QAAQ,MAG1BC,EAAeH,EAAON,iBAAiB,MAAM,GAAGU,UAGtDC,KAAKC,KAAK,CACNC,KAAM,mCAAqCJ,EAAe,IAC1DK,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,eACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,yBACfC,aAAc,0CAEnBC,MAAK,SAAUC,GACVA,EAAOC,MACPb,KAAKC,KAAK,CACNC,KAAM,oBAAsBJ,EAAe,KAC3CK,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,6BAEpBE,MAAK,WAEJ3B,EAAU8B,IAAIC,EAAEpB,IAASqB,SAASC,MACtC,IAAGN,MAAK,WAEJO,GACJ,IAC0B,WAAnBN,EAAOO,SACdnB,KAAKC,KAAK,CACNC,KAAMJ,EAAe,oBACrBK,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,4BAI/B,GACJ,GAAC,GAET,EAGIW,EAAoB,KAGpB,MAAMC,EAAatC,EAAMM,iBAAiB,qBAG1CJ,EAAcqC,SAASC,cAAc,+CACrCrC,EAAkBoC,SAASC,cAAc,mDACzCpC,EAAgBmC,SAASC,cAAc,wDACvC,MAAMC,EAAiBF,SAASC,cAAc,yDAG9CF,EAAW/B,SAAQmC,IAEfA,EAAEjC,iBAAiB,SAAS,WACxBkC,YAAW,WACPR,GACJ,GAAG,GACP,GAAE,IAINM,EAAehC,iBAAiB,SAAS,WAErCQ,KAAKC,KAAK,CACNC,KAAM,sDACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,eACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,yBACfC,aAAc,0CAEnBC,MAAK,SAAUC,GACVA,EAAOC,MACPb,KAAKC,KAAK,CACNC,KAAM,4CACNC,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,6BAEpBE,MAAK,WAEJU,EAAW/B,SAAQmC,IACXA,EAAEE,SACF3C,EAAU8B,IAAIC,EAAEU,EAAE5B,QAAQ,cAAcmB,SAASC,MACrD,IAImBlC,EAAMM,iBAAiB,qBAAqB,GACpDsC,SAAU,CAC7B,IAAGhB,MAAK,WACJO,IACAE,GACJ,IAC0B,WAAnBR,EAAOO,SACdnB,KAAKC,KAAK,CACNC,KAAM,sCACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,4BAI/B,GACJ,GAAE,EAIN,MAAMS,EAAiB,KAEnB,MAAMU,EAAgB7C,EAAMM,iBAAiB,2BAG7C,IAAIwC,GAAe,EACfC,EAAQ,EAGZF,EAActC,SAAQmC,IACdA,EAAEE,UACFE,GAAe,EACfC,IACJ,IAIAD,GACA1C,EAAc4C,UAAYD,EAC1B7C,EAAY+C,UAAUC,IAAI,UAC1B/C,EAAgB8C,UAAUhB,OAAO,YAEjC/B,EAAY+C,UAAUhB,OAAO,UAC7B9B,EAAgB8C,UAAUC,IAAI,UAClC,EAGJ,MAAO,CAEHC,KAAM,YACFnD,EAAQuC,SAASa,eAAe,6BArPlBpD,EAAMM,iBAAiB,YAE/BC,SAAQwB,IACd,MAAMsB,EAAUtB,EAAIzB,iBAAiB,MAC/BgD,EAAWC,OAAOF,EAAQ,GAAGL,UAAW,mBAAmBQ,SACjEH,EAAQ,GAAGI,aAAa,aAAcH,EAAS,KAInDrD,EAAY+B,EAAEhC,GAAO0D,UAAU,CAC3B,MAAQ,EACR,MAAS,GACT,WAAc,GACd,cAAgB,EAChB,WAAc,CACV,CAAEC,WAAW,EAAOC,QAAS,GAC7B,CAAED,WAAW,EAAOC,QAAS,OAK3BC,GAAG,QAAQ,WACjBxB,IACAhC,IACA8B,GACJ,IAmOIE,IA9NiBE,SAASC,cAAc,gDAC/B/B,iBAAiB,SAAS,SAAUC,GAC7CT,EAAU6D,OAAOpD,EAAEG,OAAOiB,OAAOI,MACrC,IA6NI7B,IAzNW,WAEf,MAAM0D,EAAaxB,SAASC,cAAc,8CACpCwB,EAAeD,EAAWvB,cAAc,gDACxCyB,EAAcF,EAAWvB,cAAc,+CACvC0B,EAAgBH,EAAWzD,iBAAiB,UAGlD0D,EAAavD,iBAAiB,SAAS,WACnC,IAAI0D,EAAe,GAGnBD,EAAc3D,SAAQ,CAAC6D,EAAMC,KACrBD,EAAKtC,OAAwB,KAAfsC,EAAKtC,QACL,IAAVuC,IACAF,GAAgB,KAIpBA,GAAgBC,EAAKtC,MACzB,IAIJ7B,EAAU6D,OAAOK,GAAcjC,MACnC,IAGA+B,EAAYxD,iBAAiB,SAAS,WAElCyD,EAAc3D,SAAQ,CAAC6D,EAAMC,KAEzBrC,EAAEoC,GAAME,IAAI,MAAMC,QAAQ,SAAS,IAIvCtE,EAAU6D,OAAO,IAAI5B,MACzB,GACJ,CAoLQsC,GACJ,EAER,CA7Q0B,GAgR1BC,OAAOC,oBAAmB,WACtB3E,EAAoBoD,MACxB,G","sources":["webpack://keen/../demo1/src/js/custom/apps/subscriptions/list/list.js"],"sourcesContent":["\"use strict\";\n\nvar KTSubscriptionsList = function () {\n    // Define shared variables\n    var table;\n    var datatable;\n    var toolbarBase;\n    var toolbarSelected;\n    var selectedCount;\n\n    // Private functions\n    var initDatatable = function () {\n        // Set date data order\n        const tableRows = table.querySelectorAll('tbody tr');\n\n        tableRows.forEach(row => {\n            const dateRow = row.querySelectorAll('td');\n            const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\n            dateRow[5].setAttribute('data-order', realDate);\n        });\n\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\n        datatable = $(table).DataTable({\n            \"info\": false,\n            'order': [],\n            \"pageLength\": 10,\n            \"lengthChange\": false,\n            'columnDefs': [\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\n                { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)                \n            ]\n        });\n\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n        datatable.on('draw', function () {\n            initToggleToolbar();\n            handleRowDeletion();\n            toggleToolbars();\n        });\n    }\n\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n    var handleSearch = function () {\n        const filterSearch = document.querySelector('[data-kt-subscription-table-filter=\"search\"]');\n        filterSearch.addEventListener('keyup', function (e) {\n            datatable.search(e.target.value).draw();\n        });\n    }\n\n    // Filter Datatable\n    var handleFilter = function () {\n        // Select filter options\n        const filterForm = document.querySelector('[data-kt-subscription-table-filter=\"form\"]');\n        const filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"filter\"]');\n        const resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"reset\"]');\n        const selectOptions = filterForm.querySelectorAll('select');\n\n        // Filter datatable on submit\n        filterButton.addEventListener('click', function () {\n            var filterString = '';\n\n            // Get filter values\n            selectOptions.forEach((item, index) => {\n                if (item.value && item.value !== '') {\n                    if (index !== 0) {\n                        filterString += ' ';\n                    }\n\n                    // Build filter value options\n                    filterString += item.value;\n                }\n            });\n\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n            datatable.search(filterString).draw();\n        });\n\n        // Reset datatable\n        resetButton.addEventListener('click', function () {\n            // Reset filter form\n            selectOptions.forEach((item, index) => {\n                // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\n                $(item).val(null).trigger('change');\n            });\n\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\n            datatable.search('').draw();\n        });\n    }\n\n    // Delete subscirption\n    var handleRowDeletion = function () {\n        // Select all delete buttons\n        const deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\"delete_row\"]');\n\n        deleteButtons.forEach(d => {\n            // Delete button on click\n            d.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                // Select parent row\n                const parent = e.target.closest('tr');\n\n                // Get customer name\n                const customerName = parent.querySelectorAll('td')[1].innerText;\n\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n                Swal.fire({\n                    text: \"Are you sure you want to delete \" + customerName + \"?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    buttonsStyling: false,\n                    confirmButtonText: \"Yes, delete!\",\n                    cancelButtonText: \"No, cancel\",\n                    customClass: {\n                        confirmButton: \"btn fw-bold btn-danger\",\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\n                    }\n                }).then(function (result) {\n                    if (result.value) {\n                        Swal.fire({\n                            text: \"You have deleted \" + customerName + \"!.\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        }).then(function () {\n                            // Remove current row\n                            datatable.row($(parent)).remove().draw();\n                        }).then(function () {\n                            // Detect checked checkboxes\n                            toggleToolbars();\n                        });\n                    } else if (result.dismiss === 'cancel') {\n                        Swal.fire({\n                            text: customerName + \" was not deleted.\",\n                            icon: \"error\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn fw-bold btn-primary\",\n                            }\n                        });\n                    }\n                });\n            })\n        });\n    }\n\n    // Init toggle toolbar\n    var initToggleToolbar = () => {\n        // Toggle selected action toolbar\n        // Select all checkboxes\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n        // Select elements\n        toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\"base\"]');\n        toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\"selected\"]');\n        selectedCount = document.querySelector('[data-kt-subscription-table-select=\"selected_count\"]');\n        const deleteSelected = document.querySelector('[data-kt-subscription-table-select=\"delete_selected\"]');\n\n        // Toggle delete selected toolbar\n        checkboxes.forEach(c => {\n            // Checkbox on click event\n            c.addEventListener('click', function () {\n                setTimeout(function () {\n                    toggleToolbars();\n                }, 50);\n            });\n        });\n\n        // Deleted selected rows\n        deleteSelected.addEventListener('click', function () {\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n            Swal.fire({\n                text: \"Are you sure you want to delete selected customers?\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, delete!\",\n                cancelButtonText: \"No, cancel\",\n                customClass: {\n                    confirmButton: \"btn fw-bold btn-danger\",\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\n                }\n            }).then(function (result) {\n                if (result.value) {\n                    Swal.fire({\n                        text: \"You have deleted all selected customers!.\",\n                        icon: \"success\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    }).then(function () {\n                        // Remove all selected customers\n                        checkboxes.forEach(c => {\n                            if (c.checked) {\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\n                            }\n                        });\n\n                        // Remove header checked box\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n                        headerCheckbox.checked = false;\n                    }).then(function () {\n                        toggleToolbars(); // Detect checked checkboxes\n                        initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\n                    });\n                } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                        text: \"Selected customers was not deleted.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn fw-bold btn-primary\",\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    // Toggle toolbars\n    const toggleToolbars = () => {\n        // Select refreshed checkbox DOM elements \n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n        // Detect checkboxes state & count\n        let checkedState = false;\n        let count = 0;\n\n        // Count checked boxes\n        allCheckboxes.forEach(c => {\n            if (c.checked) {\n                checkedState = true;\n                count++;\n            }\n        });\n\n        // Toggle toolbars\n        if (checkedState) {\n            selectedCount.innerHTML = count;\n            toolbarBase.classList.add('d-none');\n            toolbarSelected.classList.remove('d-none');\n        } else {\n            toolbarBase.classList.remove('d-none');\n            toolbarSelected.classList.add('d-none');\n        }\n    }\n\n    return {\n        // Public functions  \n        init: function () {\n            table = document.getElementById('kt_subscriptions_table');\n\n            if (!table) {\n                return;\n            }\n\n            initDatatable();\n            initToggleToolbar();\n            handleSearch();\n            handleRowDeletion();\n            handleFilter();\n        }\n    }\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n    KTSubscriptionsList.init();\n});"],"names":["KTSubscriptionsList","table","datatable","toolbarBase","toolbarSelected","selectedCount","handleRowDeletion","querySelectorAll","forEach","d","addEventListener","e","preventDefault","parent","target","closest","customerName","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","row","$","remove","draw","toggleToolbars","dismiss","initToggleToolbar","checkboxes","document","querySelector","deleteSelected","c","setTimeout","checked","allCheckboxes","checkedState","count","innerHTML","classList","add","init","getElementById","dateRow","realDate","moment","format","setAttribute","DataTable","orderable","targets","on","search","filterForm","filterButton","resetButton","selectOptions","filterString","item","index","val","trigger","handleFilter","KTUtil","onDOMContentLoaded"],"sourceRoot":""}