{"version":3,"file":"js/custom/authentication/reset-password/new-password.js","mappings":"mBAGA,IAEQA,EACAC,EACAC,EACAC,EA6HAC,EAlIJC,GAkIID,EAAmB,WACnB,OAAsC,MAA7BD,EAAcG,UAC3B,EAGO,CAEHC,KAAM,WACFP,EAAOQ,SAASC,cAAc,yBAC9BR,EAAeO,SAASC,cAAc,2BACtCN,EAAgBO,gBAAgBC,YAAYX,EAAKS,cAAc,oCAnInEP,EAAYU,eAAeC,eAChCb,EACA,CACCc,OAAQ,CACQ,SAAY,CACRC,WAAY,CACRC,SAAU,CACNC,QAAS,4BAEbC,SAAU,CACND,QAAS,8BACTC,SAAU,SAASC,GACf,GAAIA,EAAMC,MAAMC,OAAS,EACrB,OAAOjB,GAEf,KAIZ,mBAAoB,CAChBW,WAAY,CACRC,SAAU,CACNC,QAAS,yCAEbK,UAAW,CACPC,QAAS,WACL,OAAOvB,EAAKS,cAAc,qBAAqBW,KACnD,EACAH,QAAS,mDAIrB,IAAO,CACHF,WAAY,CACRC,SAAU,CACNC,QAAS,+CAKrCO,QAAS,CACRC,QAAS,IAAIb,eAAeY,QAAQE,QAAQ,CACzBC,MAAO,CACHC,UAAU,KAGjCC,UAAW,IAAIjB,eAAeY,QAAQM,WAAW,CAC9BC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAM/BhC,EAAaiC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFlC,EAAUmC,gBAAgB,YAE1BnC,EAAUoC,WAAWC,MAAK,SAASC,GACvB,SAAVA,GAEMvC,EAAawC,aAAa,oBAAqB,MAG/CxC,EAAayC,UAAW,EAGxBC,YAAW,WAEP1C,EAAa2C,gBAAgB,qBAG7B3C,EAAayC,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,6CACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBb,MAAK,SAAUc,GACd,GAAIA,EAAOC,YAAa,CACpBtD,EAAKS,cAAc,qBAAqBW,MAAO,GAC/CpB,EAAKS,cAAc,6BAA6BW,MAAO,GACvDjB,EAAcoD,QAGd,IAAIC,EAAcxD,EAAKyD,aAAa,wBAChCD,IACAE,SAASC,KAAOH,EAExB,CACJ,GACJ,GAAG,OAGHX,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAIrC,GACE,IAEApD,EAAKS,cAAc,0BAA0ByB,iBAAiB,SAAS,WAC/D0B,KAAKxC,MAAMC,OAAS,GACpBnB,EAAU2D,kBAAkB,WAAY,eAEhD,GAgBA,IAKRC,OAAOC,oBAAmB,WACtB1D,EAAkBE,MACtB,G","sources":["webpack://keen/../demo1/src/js/custom/authentication/reset-password/new-password.js"],"sourcesContent":["\"use strict\";\n\n// Class Definition\nvar KTAuthNewPassword = function() {\n    // Elements\n    var form;\n    var submitButton;\n    var validator;\n    var passwordMeter;\n\n    var handleForm = function(e) {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\t\t\t\t\t \n                    'password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password is required'\n                            },\n                            callback: {\n                                message: 'Please enter valid password',\n                                callback: function(input) {\n                                    if (input.value.length > 0) {        \n                                        return validatePassword();\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    'confirm-password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password confirmation is required'\n                            },\n                            identical: {\n                                compare: function() {\n                                    return form.querySelector('[name=\"password\"]').value;\n                                },\n                                message: 'The password and its confirm are not the same'\n                            }\n                        }\n                    },\n                    'toc': {\n                        validators: {\n                            notEmpty: {\n                                message: 'You must accept the terms and conditions'\n                            }\n                        }\n                    }\n\t\t\t\t},\n\t\t\t\tplugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger({\n                        event: {\n                            password: false\n                        }  \n                    }),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',  // comment to enable invalid state icons\n                        eleValidClass: '' // comment to enable valid state icons\n                    })\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            validator.revalidateField('password');\n\n            validator.validate().then(function(status) {\n\t\t        if (status == 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click \n                    submitButton.disabled = true;\n\n                    // Simulate ajax request\n                    setTimeout(function() {\n                        // Hide loading indication\n                        submitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        submitButton.disabled = false;\n\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"You have successfully reset your password!\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        }).then(function (result) {\n                            if (result.isConfirmed) { \n                                form.querySelector('[name=\"password\"]').value= \"\";   \n                                form.querySelector('[name=\"confirm-password\"]').value= \"\";      \n                                passwordMeter.reset();  // reset password meter\n                                //form.submit();\n\n                                var redirectUrl = form.getAttribute('data-kt-redirect-url');\n                                if (redirectUrl) {\n                                    location.href = redirectUrl;\n                                }\n                            }\n                        });\n                    }, 1500);   \t\t\t\t\t\t\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n\t\t    });\n        });\n\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function() {\n            if (this.value.length > 0) {\n                validator.updateFieldStatus('password', 'NotValidated');\n            }\n        });\n    }\n\n    var validatePassword = function() {\n        return  (passwordMeter.getScore() === 100);\n    }\n\n    // Public Functions\n    return {\n        // public functions\n        init: function() {\n            form = document.querySelector('#kt_new_password_form');\n            submitButton = document.querySelector('#kt_new_password_submit');\n            passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\"true\"]'));\n\n            handleForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTAuthNewPassword.init();\n});\n"],"names":["form","submitButton","validator","passwordMeter","validatePassword","KTAuthNewPassword","getScore","init","document","querySelector","KTPasswordMeter","getInstance","FormValidation","formValidation","fields","validators","notEmpty","message","callback","input","value","length","identical","compare","plugins","trigger","Trigger","event","password","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","redirectUrl","getAttribute","location","href","this","updateFieldStatus","KTUtil","onDOMContentLoaded"],"sourceRoot":""}