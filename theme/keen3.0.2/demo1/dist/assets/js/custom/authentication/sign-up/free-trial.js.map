{"version":3,"file":"js/custom/authentication/sign-up/free-trial.js","mappings":"mBAGA,IAEQA,EACAC,EACAC,EACAC,EAyIAC,EA9IJC,GA8IID,EAAmB,WACnB,OAAsC,MAA7BD,EAAcG,UAC3B,EAGO,CAEHC,KAAM,WACFP,EAAOQ,SAASC,cAAc,uBAC9BR,EAAeO,SAASC,cAAc,yBACtCN,EAAgBO,gBAAgBC,YAAYX,EAAKS,cAAc,oCA9InEP,EAAYU,eAAeC,eAChCb,EACA,CACCc,OAAQ,CACP,MAAS,CACUC,WAAY,CACRC,OAAQ,CACJA,OAAQ,6BACRC,QAAS,0CAElCC,SAAU,CACTD,QAAS,+BAIG,SAAY,CACRF,WAAY,CACRG,SAAU,CACND,QAAS,4BAEbE,SAAU,CACNF,QAAS,8BACTE,SAAU,SAASC,GACf,GAAIA,EAAMC,MAAMC,OAAS,EACrB,OAAOlB,GAEf,KAIZ,mBAAoB,CAChBW,WAAY,CACRG,SAAU,CACND,QAAS,yCAEbM,UAAW,CACPC,QAAS,WACL,OAAOxB,EAAKS,cAAc,qBAAqBY,KACnD,EACAJ,QAAS,mDAIrB,IAAO,CACHF,WAAY,CACRG,SAAU,CACND,QAAS,+CAKzBQ,QAAS,CACpBC,QAAS,IAAId,eAAea,QAAQE,QAAQ,CACzBC,MAAO,CACHC,UAAU,KAGjCC,UAAW,IAAIlB,eAAea,QAAQM,WAAW,CAC9BC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAM/BjC,EAAakC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFnC,EAAUoC,gBAAgB,YAE1BpC,EAAUqC,WAAWC,MAAK,SAASC,GACvB,SAAVA,GAEMxC,EAAayC,aAAa,oBAAqB,MAG/CzC,EAAa0C,UAAW,EAGxBC,YAAW,WAEP3C,EAAa4C,gBAAgB,qBAG7B5C,EAAa0C,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,oCACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBb,MAAK,SAAUc,GACd,GAAIA,EAAOC,YAAa,CACpBvD,EAAKwD,QACLrD,EAAcqD,QAGd,IAAIC,EAAczD,EAAK0D,aAAa,wBAChCD,IACAE,SAASC,KAAOH,EAExB,CACJ,GACJ,GAAG,OAGHX,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAIrC,GACE,IAEArD,EAAKS,cAAc,0BAA0B0B,iBAAiB,SAAS,WAC/D0B,KAAKxC,MAAMC,OAAS,GACpBpB,EAAU4D,kBAAkB,WAAY,eAEhD,GAiBA,IAKRC,OAAOC,oBAAmB,WACtB3D,EAAkBE,MACtB,G","sources":["webpack://keen/../demo1/src/js/custom/authentication/sign-up/free-trial.js"],"sourcesContent":["\"use strict\";\n\n// Class Definition\nvar KTSignupFreeTrial = function() {\n    // Elements\n    var form;\n    var submitButton;\n    var validator;\n    var passwordMeter;\n\n    // Handle form\n    var handleForm = function(e) {\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n        validator = FormValidation.formValidation(\n\t\t\tform,\n\t\t\t{\n\t\t\t\tfields: {\t\t\t\t\t \n\t\t\t\t\t'email': {\n                        validators: {\n                            regexp: {\n                                regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                                message: 'The value is not a valid email address',\n                            },\n\t\t\t\t\t\t\tnotEmpty: {\n\t\t\t\t\t\t\t\tmessage: 'Email address is required'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n                    'password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password is required'\n                            },\n                            callback: {\n                                message: 'Please enter valid password',\n                                callback: function(input) {\n                                    if (input.value.length > 0) {\n                                        return validatePassword();\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    'confirm-password': {\n                        validators: {\n                            notEmpty: {\n                                message: 'The password confirmation is required'\n                            },\n                            identical: {\n                                compare: function() {\n                                    return form.querySelector('[name=\"password\"]').value;\n                                },\n                                message: 'The password and its confirm are not the same'\n                            }\n                        }\n                    },\n                    'toc': {\n                        validators: {\n                            notEmpty: {\n                                message: 'You must accept the terms and conditions'\n                            }\n                        }\n                    }\n                },\n                plugins: {\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger({\n                        event: {\n                            password: false\n                        }  \n                    }),\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\n                        rowSelector: '.fv-row',\n                        eleInvalidClass: '',\n                        eleValidClass: ''\n                    })\n                }\t\t\t \n\t\t\t}\n\t\t);\n\n        submitButton.addEventListener('click', function (e) {\n            e.preventDefault();\n\n            validator.revalidateField('password');\n\n            validator.validate().then(function(status) {\n\t\t        if (status == 'Valid') {\n                    // Show loading indication\n                    submitButton.setAttribute('data-kt-indicator', 'on');\n\n                    // Disable button to avoid multiple click \n                    submitButton.disabled = true;\n\n                    // Simulate ajax request\n                    setTimeout(function() {\n                        // Hide loading indication\n                        submitButton.removeAttribute('data-kt-indicator');\n\n                        // Enable button\n                        submitButton.disabled = false;\n\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                        Swal.fire({\n                            text: \"You have successfully registered!\",\n                            icon: \"success\",\n                            buttonsStyling: false,\n                            confirmButtonText: \"Ok, got it!\",\n                            customClass: {\n                                confirmButton: \"btn btn-primary\"\n                            }\n                        }).then(function (result) {\n                            if (result.isConfirmed) { \n                                form.reset();  // reset form                    \n                                passwordMeter.reset();  // reset password meter\n\n                                //form.submit(); // submit form\n                                var redirectUrl = form.getAttribute('data-kt-redirect-url');\n                                if (redirectUrl) {\n                                    location.href = redirectUrl;\n                                }\n                            }\n                        });\n                    }, 1500);   \t\t\t\t\t\t\n                } else {\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n                    Swal.fire({\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\n                        icon: \"error\",\n                        buttonsStyling: false,\n                        confirmButtonText: \"Ok, got it!\",\n                        customClass: {\n                            confirmButton: \"btn btn-primary\"\n                        }\n                    });\n                }\n\t\t    });\n        });\n\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function() {\n            if (this.value.length > 0) {\n                validator.updateFieldStatus('password', 'NotValidated');\n            }\n        });\n    }\n\n    // Password input validation\n    var validatePassword = function() {\n        return  (passwordMeter.getScore() === 100);\n    }\n\n    // Public functions\n    return {\n        // Initialization\n        init: function() {\n            form = document.querySelector('#kt_free_trial_form');\n            submitButton = document.querySelector('#kt_free_trial_submit');\n            passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\"true\"]'));\n\n            handleForm();\n        }\n    };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function() {\n    KTSignupFreeTrial.init();\n});\n\n\n "],"names":["form","submitButton","validator","passwordMeter","validatePassword","KTSignupFreeTrial","getScore","init","document","querySelector","KTPasswordMeter","getInstance","FormValidation","formValidation","fields","validators","regexp","message","notEmpty","callback","input","value","length","identical","compare","plugins","trigger","Trigger","event","password","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","redirectUrl","getAttribute","location","href","this","updateFieldStatus","KTUtil","onDOMContentLoaded"],"sourceRoot":""}